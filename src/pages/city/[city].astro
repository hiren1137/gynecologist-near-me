---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { getAllStateCityCombinations, getDoctorsForCity } from '../../lib/data';

export async function getStaticPaths() {
  try {
    const combinations = await getAllStateCityCombinations();
    
    if (combinations && combinations.length > 0) {
      const paths = await Promise.all(combinations.map(async ({ state, city }) => {
        try {
          const doctors = await getDoctorsForCity(state, city);
          return {
            params: { city },
            props: { 
              cityName: city.charAt(0).toUpperCase() + city.slice(1).replace(/-/g, ' '),
              stateName: state.charAt(0).toUpperCase() + state.slice(1).replace(/-/g, ' '),
              stateSlug: state,
              citySlug: city,
              doctors
            }
          };
        } catch (error) {
          console.error(`Failed to fetch doctors for ${city}:`, error);
          return {
            params: { city },
            props: { 
              cityName: city.charAt(0).toUpperCase() + city.slice(1).replace(/-/g, ' '),
              stateName: state.charAt(0).toUpperCase() + state.slice(1).replace(/-/g, ' '),
              stateSlug: state,
              citySlug: city,
              doctors: []
            }
          };
        }
      }));
      
      return paths;
    }
  } catch (error) {
    console.error('Failed to fetch state-city combinations from Supabase:', error);
  }
  
  // Fallback city data when API fails
  const fallbackCities = [
    { state: 'gujarat', city: 'ahmedabad', stateName: 'Gujarat' },
    { state: 'gujarat', city: 'surat', stateName: 'Gujarat' },
    { state: 'gujarat', city: 'vadodara', stateName: 'Gujarat' },
    { state: 'gujarat', city: 'rajkot', stateName: 'Gujarat' },
    { state: 'maharashtra', city: 'mumbai', stateName: 'Maharashtra' },
    { state: 'maharashtra', city: 'pune', stateName: 'Maharashtra' },
    { state: 'maharashtra', city: 'nagpur', stateName: 'Maharashtra' },
    { state: 'karnataka', city: 'bangalore', stateName: 'Karnataka' },
    { state: 'karnataka', city: 'mysore', stateName: 'Karnataka' },
    { state: 'tamil-nadu', city: 'chennai', stateName: 'Tamil Nadu' },
    { state: 'tamil-nadu', city: 'coimbatore', stateName: 'Tamil Nadu' },
    { state: 'delhi', city: 'new-delhi', stateName: 'Delhi' },
    { state: 'west-bengal', city: 'kolkata', stateName: 'West Bengal' },
    { state: 'telangana', city: 'hyderabad', stateName: 'Telangana' },
    { state: 'kerala', city: 'thiruvananthapuram', stateName: 'Kerala' },
    { state: 'kerala', city: 'kochi', stateName: 'Kerala' },
    { state: 'punjab', city: 'ludhiana', stateName: 'Punjab' },
    { state: 'haryana', city: 'gurgaon', stateName: 'Haryana' },
    { state: 'rajasthan', city: 'jaipur', stateName: 'Rajasthan' },
    { state: 'uttar-pradesh', city: 'lucknow', stateName: 'Uttar Pradesh' }
  ];
  
  console.log('Using fallback city data for static generation');
  return fallbackCities.map(({ state, city, stateName }) => ({
    params: { city },
    props: { 
      cityName: city.charAt(0).toUpperCase() + city.slice(1).replace(/-/g, ' '),
      stateName: stateName,
      stateSlug: state,
      citySlug: city,
      doctors: []
    }
  }));
}

const { cityName, stateName, stateSlug, citySlug, doctors } = Astro.props;

// Sort doctors by total reviews (highest first)
const gynecologists = doctors.sort((a, b) => (b.totalReviews || 0) - (a.totalReviews || 0));

// Calculate average rating
const averageRating = gynecologists.length > 0 
  ? (gynecologists.reduce((sum, doctor) => sum + (doctor.rating || 0), 0) / gynecologists.length).toFixed(1)
  : "0.0";
---

<Layout 
  title={`Best Gynecologists in ${cityName} - Expert Women's Healthcare Specialists`}
  description={`Find top-rated gynecologists in ${cityName}, ${stateName}. Complete directory of expert women's healthcare specialists with verified credentials, patient reviews, and contact information.`}
  keywords={`gynecologist ${cityName}, women's health ${cityName}, obstetrics ${cityName}, pregnancy care ${cityName}, ${stateName}`}
>
  <Header />
  
  <main class="min-h-screen bg-gray-50">
    <!-- Breadcrumb -->
    <nav class="bg-white border-b border-gray-200 py-3">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center space-x-2 text-sm text-gray-600 overflow-x-auto">
          <a href="/" class="hover:text-pink-600 whitespace-nowrap">Home</a>
          <svg class="w-4 h-4 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
          </svg>
          {stateSlug && (
            <>
              <a href={`/${stateSlug}`} class="hover:text-pink-600 whitespace-nowrap">{stateName}</a>
              <svg class="w-4 h-4 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
              </svg>
            </>
          )}
          <span class="text-pink-600 font-medium">{cityName}</span>
        </div>
      </div>
    </nav>

    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-pink-50 to-purple-50 py-12">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <h1 class="text-3xl md:text-5xl font-bold text-gray-900 mb-4">
            Best Gynecologists in <span class="text-pink-600">{cityName}</span>
          </h1>
          <p class="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
            Complete directory of expert women's healthcare specialists in {cityName}, {stateName}. Find top-rated gynecologists with verified credentials and patient reviews.
          </p>
          
          <!-- Quick Stats -->
          <div class="grid grid-cols-2 gap-4 max-w-xl mx-auto">
            <div class="bg-white rounded-lg p-4 shadow-sm">
              <div class="text-2xl font-bold text-pink-600">{gynecologists.length}</div>
              <div class="text-sm text-gray-600">Expert Doctors</div>
            </div>
            <div class="bg-white rounded-lg p-4 shadow-sm">
              <div class="text-2xl font-bold text-pink-600">{averageRating}â˜…</div>
              <div class="text-sm text-gray-600">Average Rating</div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Gynecologists List -->
    <section class="py-12">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-2xl md:text-3xl font-bold text-gray-900 mb-8">
          Top Gynecologists in {cityName}
        </h2>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {gynecologists.map((doctor) => (
            <div class="bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-300 border border-gray-200 overflow-hidden">
              <div class="p-6">
                <div class="flex items-start space-x-4">
                  <!-- Doctor Image -->
                  <div class="flex-shrink-0">
                    {doctor.images && doctor.images.length > 0 ? (
                      <div class="w-20 h-20 lg:w-24 lg:h-24 rounded-xl overflow-hidden shadow-md">
                        <img 
                          src={doctor.images[0]} 
                          alt={doctor.name}
                          class="w-full h-full object-cover"
                          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                        />
                        <div class="w-full h-full bg-gradient-to-br from-pink-100 to-pink-200 rounded-xl flex items-center justify-center" style="display: none;">
                          <svg class="w-10 h-10 lg:w-12 lg:h-12 text-pink-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                          </svg>
                        </div>
                      </div>
                    ) : (
                      <div class="w-20 h-20 lg:w-24 lg:h-24 bg-gradient-to-br from-pink-100 to-pink-200 rounded-xl flex items-center justify-center shadow-md">
                        <svg class="w-10 h-10 lg:w-12 lg:h-12 text-pink-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                      </div>
                    )}
                  </div>
                  
                  <div class="flex-1 min-w-0">
                    <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between mb-3">
                  <div class="flex-1">
                        <h3 class="text-lg lg:text-xl font-semibold text-gray-900 mb-1 hover:text-pink-600 transition-colors">
                          <a href={`/city/${citySlug}/${doctor.slug}`}>
                            {doctor.name}
                          </a>
                        </h3>
                        <p class="text-sm text-gray-600 mb-2">{doctor.qualification}</p>
                      </div>
                      <div class="text-right mt-2 sm:mt-0">
                        <div class="flex items-center justify-end">
                          <svg class="w-4 h-4 text-yellow-400 fill-current" viewBox="0 0 20 20">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
                          </svg>
                          <span class="text-sm font-medium text-gray-900 ml-1">{doctor.rating || '4.5'}</span>
                        </div>
                        <span class="text-xs text-gray-500">({doctor.totalReviews || 0} reviews)</span>
                      </div>
                    </div>
                    
                    <div class="mb-4">
                      <div class="text-sm text-gray-500">Hospital/Clinic</div>
                      <div class="font-medium text-gray-900 truncate">{doctor.hospital}</div>
                      <div class="text-sm text-gray-600 mt-1 line-clamp-2">{doctor.address}</div>
                    </div>
                    
                    <div class="mb-4">
                      <div class="text-sm text-gray-500 mb-2">Specializations</div>
                      <div class="flex flex-wrap gap-1">
                        {doctor.specialization.slice(0, 3).map((spec) => (
                          <span class="text-xs bg-pink-50 text-pink-700 px-2 py-1 rounded-full">
                            {spec}
                          </span>
                        ))}
                        {doctor.specialization.length > 3 && (
                          <span class="text-xs bg-gray-50 text-gray-600 px-2 py-1 rounded-full">
                            +{doctor.specialization.length - 3} more
                          </span>
                        )}
                      </div>
                    </div>
                    
                    <div class="flex items-center justify-between pt-4 border-t border-gray-100">
                      <div>
                        <div class="text-sm text-gray-500">Total Reviews</div>
                        <div class="text-lg font-semibold text-pink-600">{doctor.totalReviews || 0}</div>
                      </div>
                      <div class="flex space-x-2">
                        {doctor.phone && (
                          <a 
                            href={`tel:${doctor.phone}`}
                            class="bg-pink-600 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-pink-700 transition-colors flex items-center"
                          >
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                            </svg>
                            Call
                          </a>
                        )}
                        <a 
                          href={`/city/${citySlug}/${doctor.slug}`}
                          class="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg text-sm font-medium hover:bg-gray-200 transition-colors"
                        >
                          View Profile
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {gynecologists.length === 0 && (
          <div class="text-center py-12">
            <div class="text-gray-500 text-lg">No gynecologists found in {cityName}</div>
            <p class="text-gray-400 mt-2">Please check back later or explore other cities.</p>
          </div>
        )}
      </div>
    </section>
  </main>

  <Footer />
</Layout> 